# Task ID: 11
# Title: Query Performance Analysis Tool
# Status: pending
# Dependencies: 5
# Priority: medium
# Description: Develop a tool to analyze and optimize database query performance, including execution time tracking and optimization recommendations.
# Details:
Create src/database/performance_analyzer.py with functionality to:
- Track query execution times
- Analyze query plans (EXPLAIN)
- Identify slow queries and bottlenecks
- Suggest optimization strategies (indexing, query rewriting)
- Monitor database load and performance metrics

Implement the following structure:
```python
class QueryPerformanceAnalyzer:
    def __init__(self, query_manager):
        self.query_manager = query_manager
        self.performance_log = []
    
    def analyze_query(self, query, params=None):
        # Analyze query execution plan
        # Execute query and track performance
        pass
    
    def get_slow_queries(self, threshold_ms=1000):
        # Identify slow queries from performance log
        pass
    
    def suggest_optimizations(self, query):
        # Suggest optimization strategies
        pass
    
    def analyze_index_usage(self, table_name=None):
        # Analyze index usage efficiency
        pass
    
    def monitor_database_load(self, interval_seconds=60, duration_minutes=10):
        # Monitor database load over time
        pass
```

Store optimization-related queries in queries/performance/ directory.

# Test Strategy:
Create tests in tests/database/test_performance_analyzer.py to verify:
- Accurate execution time tracking
- Correct query plan analysis
- Proper identification of slow queries
- Relevant optimization suggestions
Use sample queries with known performance characteristics for testing.
