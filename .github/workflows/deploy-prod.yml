name: Deploy to Production

on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      comment:
        description: 'Deployment comment'
        required: true
        default: 'Manual deployment to production'
      approve_now:
        description: 'Bypass approval timeout (requires approval role)'
        required: false
        type: boolean
        default: false

jobs:
  prepare-deployment:
    name: Prepare Production Deployment
    runs-on: ubuntu-latest
    environment: production-prepare
    outputs:
      deployment_id: ${{ steps.create-deployment.outputs.deployment_id }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run comprehensive tests
        run: |
          npm run test:unit
          npm run test:integration
          npm run test:e2e:staging
          npm run security:scan
      
      - name: Build project
        run: npm run build
      
      - name: Create deployment record
        id: create-deployment
        uses: chrnorm/deployment-action@v2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          environment: production
          ref: ${{ github.ref }}
      
      - name: Notify deployment preparation
        uses: slackapi/slack-github-action@v1.23.0
        with:
          channel-id: ${{ secrets.SLACK_CHANNEL_PROD }}
          slack-message: "üîÑ Preparing deployment to Production environment. Approval required. https://github.com/voca9204@gmail.com/db2/actions/runs/${{ github.run_id }}"
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}

  get-approval:
    name: Wait for Production Deployment Approval
    needs: prepare-deployment
    runs-on: ubuntu-latest
    environment: production-approval
    
    steps:
      - name: Check approval timeout
        if: github.event.inputs.approve_now != 'true'
        run: |
          echo "Waiting for approval..."
          sleep 10  # In real deployment, the environment protection rules will wait for approval
      
      - name: Approval received
        run: echo "Deployment approved by $GITHUB_ACTOR"
      
      - name: Notify approval
        uses: slackapi/slack-github-action@v1.23.0
        with:
          channel-id: ${{ secrets.SLACK_CHANNEL_PROD }}
          slack-message: "‚úÖ Production deployment approved by ${{ github.actor }}. Proceeding with deployment..."
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}

  deploy-production:
    name: Deploy to Production Environment
    needs: [prepare-deployment, get-approval]
    runs-on: ubuntu-latest
    environment: production
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Build project
        run: npm run build
      
      - name: Set environment variables for Firebase
        run: |
          echo "DB_HOST=${{ secrets.DB_HOST }}" >> $GITHUB_ENV
          echo "DB_USER=${{ secrets.DB_USER }}" >> $GITHUB_ENV
          echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> $GITHUB_ENV
          echo "DB_NAME=${{ secrets.DB_NAME }}" >> $GITHUB_ENV
          echo "FIREBASE_TOKEN=${{ secrets.FIREBASE_TOKEN }}" >> $GITHUB_ENV
      
      - name: Set Firebase project
        run: npx firebase use db888
      
      - name: Set Firebase Functions configuration
        run: |
          npx firebase functions:config:set \
            database.host="$DB_HOST" \
            database.user="$DB_USER" \
            database.password="$DB_PASSWORD" \
            database.name="$DB_NAME" \
            environment.name="production"
      
      - name: Deploy Firebase Functions (Canary - 5%)
        run: |
          npx firebase deploy --only functions:analyticsAPI --config firebase.canary.json
      
      - name: Run canary smoke tests
        run: npm run test:verification:prod-canary
      
      - name: Monitor canary for 10 minutes
        run: |
          echo "Monitoring canary deployment for 10 minutes..."
          # In reality this would use a script to monitor error rates and performance
          sleep 30  # Simplified for this example
      
      - name: Deploy Firebase Functions (50%)
        if: success()
        run: |
          npx firebase deploy --only functions:analyticsAPI --config firebase.half.json
      
      - name: Monitor 50% deployment for 10 minutes
        if: success()
        run: |
          echo "Monitoring 50% deployment for 10 minutes..."
          # In reality this would use a script to monitor error rates and performance
          sleep 30  # Simplified for this example
      
      - name: Deploy Firebase Functions (Full)
        if: success()
        run: npx firebase deploy --only functions
      
      - name: Deploy Firebase Hosting
        if: success()
        run: npx firebase deploy --only hosting
      
      - name: Run post-deployment verification tests
        if: success()
        run: npm run test:e2e:prod
      
      - name: Update deployment status to success
        if: success()
        uses: chrnorm/deployment-status@v2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          state: success
          deployment-id: ${{ needs.prepare-deployment.outputs.deployment_id }}
      
      - name: Update deployment status to failure
        if: failure()
        uses: chrnorm/deployment-status@v2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          state: failure
          deployment-id: ${{ needs.prepare-deployment.outputs.deployment_id }}
      
      - name: Notify deployment success
        if: success()
        uses: slackapi/slack-github-action@v1.23.0
        with:
          channel-id: ${{ secrets.SLACK_CHANNEL_PROD }}
          slack-message: "üöÄ Successfully deployed to Production environment! Check it out: https://db888.web.app"
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
      
      - name: Notify deployment failure
        if: failure()
        uses: slackapi/slack-github-action@v1.23.0
        with:
          channel-id: ${{ secrets.SLACK_CHANNEL_PROD }}
          slack-message: "‚ùå Failed to deploy to Production environment! Please check the logs: https://github.com/voca9204@gmail.com/db2/actions/runs/${{ github.run_id }}"
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
      
      - name: Rollback on failure
        if: failure()
        run: |
          echo "Deployment failed, rolling back to previous version"
          npx firebase functions:rollback
          npx firebase hosting:rollback
      
      - name: Notify rollback
        if: failure()
        uses: slackapi/slack-github-action@v1.23.0
        with:
          channel-id: ${{ secrets.SLACK_CHANNEL_PROD }}
          slack-message: "‚ö†Ô∏è Deployment failed, rolled back to previous version on Production environment."
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
